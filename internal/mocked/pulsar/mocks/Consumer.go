// Code generated by mockery. DO NOT EDIT.

package mocks

import (
	context "context"

	pulsar "github.com/apache/pulsar-client-go/pulsar"
	mock "github.com/stretchr/testify/mock"

	time "time"
)

// Consumer is an autogenerated mock type for the Consumer type
type Consumer struct {
	mock.Mock
}

// Ack provides a mock function with given fields: _a0
func (_m *Consumer) Ack(_a0 pulsar.Message) error {
	ret := _m.Called(_a0)

	var r0 error
	if rf, ok := ret.Get(0).(func(pulsar.Message) error); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// AckID provides a mock function with given fields: _a0
func (_m *Consumer) AckID(_a0 pulsar.MessageID) error {
	ret := _m.Called(_a0)

	var r0 error
	if rf, ok := ret.Get(0).(func(pulsar.MessageID) error); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Chan provides a mock function with given fields:
func (_m *Consumer) Chan() <-chan pulsar.ConsumerMessage {
	ret := _m.Called()

	var r0 <-chan pulsar.ConsumerMessage
	if rf, ok := ret.Get(0).(func() <-chan pulsar.ConsumerMessage); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(<-chan pulsar.ConsumerMessage)
		}
	}

	return r0
}

// Close provides a mock function with given fields:
func (_m *Consumer) Close() {
	_m.Called()
}

// Nack provides a mock function with given fields: _a0
func (_m *Consumer) Nack(_a0 pulsar.Message) {
	_m.Called(_a0)
}

// NackID provides a mock function with given fields: _a0
func (_m *Consumer) NackID(_a0 pulsar.MessageID) {
	_m.Called(_a0)
}

// Name provides a mock function with given fields:
func (_m *Consumer) Name() string {
	ret := _m.Called()

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// Receive provides a mock function with given fields: _a0
func (_m *Consumer) Receive(_a0 context.Context) (pulsar.Message, error) {
	ret := _m.Called(_a0)

	var r0 pulsar.Message
	if rf, ok := ret.Get(0).(func(context.Context) pulsar.Message); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(pulsar.Message)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ReconsumeLater provides a mock function with given fields: msg, delay
func (_m *Consumer) ReconsumeLater(msg pulsar.Message, delay time.Duration) {
	_m.Called(msg, delay)
}

// Seek provides a mock function with given fields: _a0
func (_m *Consumer) Seek(_a0 pulsar.MessageID) error {
	ret := _m.Called(_a0)

	var r0 error
	if rf, ok := ret.Get(0).(func(pulsar.MessageID) error); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// SeekByTime provides a mock function with given fields: _a0
func (_m *Consumer) SeekByTime(_a0 time.Time) error {
	ret := _m.Called(_a0)

	var r0 error
	if rf, ok := ret.Get(0).(func(time.Time) error); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Subscription provides a mock function with given fields:
func (_m *Consumer) Subscription() string {
	ret := _m.Called()

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// Unsubscribe provides a mock function with given fields:
func (_m *Consumer) Unsubscribe() error {
	ret := _m.Called()

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

type mockConstructorTestingTNewConsumer interface {
	mock.TestingT
	Cleanup(func())
}

// NewConsumer creates a new instance of Consumer. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewConsumer(t mockConstructorTestingTNewConsumer) *Consumer {
	mock := &Consumer{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
