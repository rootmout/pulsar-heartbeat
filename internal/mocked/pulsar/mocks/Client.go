// Code generated by mockery. DO NOT EDIT.

package mocks

import (
	pulsar "github.com/apache/pulsar-client-go/pulsar"
	mock "github.com/stretchr/testify/mock"
)

// Client is an autogenerated mock type for the Client type
type Client struct {
	mock.Mock
}

// Close provides a mock function with given fields:
func (_m *Client) Close() {
	_m.Called()
}

// CreateProducer provides a mock function with given fields: _a0
func (_m *Client) CreateProducer(_a0 pulsar.ProducerOptions) (pulsar.Producer, error) {
	ret := _m.Called(_a0)

	var r0 pulsar.Producer
	if rf, ok := ret.Get(0).(func(pulsar.ProducerOptions) pulsar.Producer); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(pulsar.Producer)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(pulsar.ProducerOptions) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateReader provides a mock function with given fields: _a0
func (_m *Client) CreateReader(_a0 pulsar.ReaderOptions) (pulsar.Reader, error) {
	ret := _m.Called(_a0)

	var r0 pulsar.Reader
	if rf, ok := ret.Get(0).(func(pulsar.ReaderOptions) pulsar.Reader); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(pulsar.Reader)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(pulsar.ReaderOptions) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateTableView provides a mock function with given fields: _a0
func (_m *Client) CreateTableView(_a0 pulsar.TableViewOptions) (pulsar.TableView, error) {
	ret := _m.Called(_a0)

	var r0 pulsar.TableView
	if rf, ok := ret.Get(0).(func(pulsar.TableViewOptions) pulsar.TableView); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(pulsar.TableView)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(pulsar.TableViewOptions) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Subscribe provides a mock function with given fields: _a0
func (_m *Client) Subscribe(_a0 pulsar.ConsumerOptions) (pulsar.Consumer, error) {
	ret := _m.Called(_a0)

	var r0 pulsar.Consumer
	if rf, ok := ret.Get(0).(func(pulsar.ConsumerOptions) pulsar.Consumer); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(pulsar.Consumer)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(pulsar.ConsumerOptions) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// TopicPartitions provides a mock function with given fields: topic
func (_m *Client) TopicPartitions(topic string) ([]string, error) {
	ret := _m.Called(topic)

	var r0 []string
	if rf, ok := ret.Get(0).(func(string) []string); ok {
		r0 = rf(topic)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]string)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(topic)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewClient interface {
	mock.TestingT
	Cleanup(func())
}

// NewClient creates a new instance of Client. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewClient(t mockConstructorTestingTNewClient) *Client {
	mock := &Client{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
